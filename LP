{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Question:\n",
    "\n",
    "Prove if there are no characters with frequency above 0.4, then the shortest huffman encoding of length 2."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Number of variables = 4\n",
      "Number of constraints = 5\n",
      "Solution:\n",
      "x1 = 0.5\n",
      "x2 = 0.0\n",
      "x3 = 0.0\n",
      "x4 = 0.5\n",
      "Optimal objective value = 0.5\n",
      "\n",
      "Advanced usage:\n",
      "Problem solved in  1  milliseconds\n",
      "Problem solved in  3  iterations\n",
      "x1: reduced cost = 0.0\n",
      "x2: reduced cost = -0.5\n",
      "x3: reduced cost = 0.0\n",
      "x4: reduced cost = 0.0\n",
      "constraint1: dual value = -0.0  activities = 0.5\n",
      "constraint2: dual value = -0.0  activities = 0.0\n",
      "constraint3: dual value = -0.5  activities = 0.0\n",
      "constraint4: dual value = -0.0  activities = 0.5\n"
     ]
    }
   ],
   "source": [
    "from __future__ import print_function\n",
    "from ortools.linear_solver import pywraplp\n",
    "\n",
    "def main():\n",
    "    \"\"\"Entry point of the program\"\"\"\n",
    "    # Instantiate a Glop solver, naming it minHuff.\n",
    "    solver = pywraplp.Solver('minHuff', pywraplp.Solver.GLOP_LINEAR_PROGRAMMING)\n",
    "\n",
    "    # Create the 4 variables and let them take on any value between [0, 1].\n",
    "    x1 = solver.NumVar(0, 1, 'x1')\n",
    "    x2 = solver.NumVar(0, 1, 'x2')\n",
    "    x3 = solver.NumVar(0, 1, 'x3')\n",
    "    x4 = solver.NumVar(0, 1, 'x4')\n",
    "    \n",
    "    # Objective function: Maximize x1.\n",
    "    objective = solver.Objective()\n",
    "    \n",
    "    objective.SetCoefficient(x1, 1)\n",
    "    objective.SetCoefficient(x2, 0)\n",
    "    objective.SetCoefficient(x3, 0)\n",
    "    objective.SetCoefficient(x4, 0)\n",
    "    \n",
    "    objective.SetMaximization()\n",
    "    \n",
    "  # Constraint 0:\n",
    "    constraint0 = solver.Constraint(1, 1)\n",
    "    constraint0.SetCoefficient(x1, 1)\n",
    "    constraint0.SetCoefficient(x2, 1)\n",
    "    constraint0.SetCoefficient(x3, 1)\n",
    "    constraint0.SetCoefficient(x4, 1)   \n",
    "\n",
    "  # Constraint 1: x1 + x2 >= x_3.\n",
    "    constraint1 = solver.Constraint(0, solver.infinity())\n",
    "    constraint1.SetCoefficient(x1, 1)\n",
    "    constraint1.SetCoefficient(x2, 1)\n",
    "    constraint1.SetCoefficient(x3,-1)\n",
    "    constraint1.SetCoefficient(x4, 0)\n",
    "\n",
    "  # Constraint 2: x1 + x2 >= x_4.\n",
    "    constraint2 = solver.Constraint(0, solver.infinity())\n",
    "    constraint2.SetCoefficient(x1, 1)\n",
    "    constraint2.SetCoefficient(x2, 1)\n",
    "    constraint2.SetCoefficient(x3, 0)\n",
    "    constraint2.SetCoefficient(x4,-1)\n",
    "\n",
    "\n",
    "  # Constraint 3: x3 + x4 >= x_1.\n",
    "    constraint3 = solver.Constraint(0, solver.infinity())\n",
    "    constraint3.SetCoefficient(x1,-1)\n",
    "    constraint3.SetCoefficient(x2, 0)\n",
    "    constraint3.SetCoefficient(x3, 1)\n",
    "    constraint3.SetCoefficient(x4, 1)\n",
    "\n",
    "  # Constraint 4: x3 + x4 >= x_2.\n",
    "    constraint4 = solver.Constraint(0, solver.infinity())\n",
    "    constraint4.SetCoefficient(x1, 0)\n",
    "    constraint4.SetCoefficient(x2,-1)\n",
    "    constraint4.SetCoefficient(x3, 1)\n",
    "    constraint4.SetCoefficient(x4, 1)    \n",
    "    \n",
    "    print('Number of variables =', solver.NumVariables())\n",
    "    print('Number of constraints =', solver.NumConstraints())\n",
    "\n",
    "    # Solve the system.\n",
    "    status = solver.Solve()\n",
    "    # Check that the problem has an optimal solution.\n",
    "    if status != pywraplp.Solver.OPTIMAL:\n",
    "        print(\"The problem does not have an optimal solution!\")\n",
    "        exit(1)\n",
    "\n",
    "    print('Solution:')\n",
    "    print('x1 =', x1.solution_value())\n",
    "    print('x2 =', x2.solution_value())\n",
    "    print('x3 =', x3.solution_value())\n",
    "    print('x4 =', x4.solution_value())\n",
    "    print('Optimal objective value =', objective.Value())\n",
    "    print('')\n",
    "    \n",
    "    print('Advanced usage:')\n",
    "    print('Problem solved in ', solver.wall_time(), ' milliseconds')\n",
    "    print('Problem solved in ', solver.iterations(), ' iterations')\n",
    "    \n",
    "    print('x1: reduced cost =', x1.reduced_cost())\n",
    "    print('x2: reduced cost =', x2.reduced_cost())\n",
    "    print('x3: reduced cost =', x3.reduced_cost())\n",
    "    print('x4: reduced cost =', x4.reduced_cost())    \n",
    "    \n",
    "    activities = solver.ComputeConstraintActivities()\n",
    "    \n",
    "    print('constraint1: dual value =', constraint1.dual_value(),\n",
    "        ' activities =', activities[constraint1.index()])\n",
    "    print('constraint2: dual value =', constraint2.dual_value(),\n",
    "        ' activities =', activities[constraint2.index()])\n",
    "    print('constraint3: dual value =', constraint3.dual_value(),\n",
    "        ' activities =', activities[constraint3.index()])\n",
    "    print('constraint4: dual value =', constraint4.dual_value(),\n",
    "        ' activities =', activities[constraint4.index()])\n",
    "\n",
    "\n",
    "if __name__ == '__main__':\n",
    "    main()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.6.3"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
